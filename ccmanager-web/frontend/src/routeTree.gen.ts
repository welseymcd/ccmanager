/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

import { Route as rootRouteImport } from './routes/__root'
import { Route as LoginRouteImport } from './routes/login'
import { Route as AuthenticatedRouteImport } from './routes/_authenticated'
import { Route as AuthenticatedIndexRouteImport } from './routes/_authenticated/index'
import { Route as AuthenticatedExplorerRouteImport } from './routes/_authenticated/explorer'
import { Route as AuthenticatedProjectsProjectIdRouteImport } from './routes/_authenticated/projects.$projectId'

const LoginRoute = LoginRouteImport.update({
  id: '/login',
  path: '/login',
  getParentRoute: () => rootRouteImport,
} as any)
const AuthenticatedRoute = AuthenticatedRouteImport.update({
  id: '/_authenticated',
  getParentRoute: () => rootRouteImport,
} as any)
const AuthenticatedIndexRoute = AuthenticatedIndexRouteImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => AuthenticatedRoute,
} as any)
const AuthenticatedExplorerRoute = AuthenticatedExplorerRouteImport.update({
  id: '/explorer',
  path: '/explorer',
  getParentRoute: () => AuthenticatedRoute,
} as any)
const AuthenticatedProjectsProjectIdRoute =
  AuthenticatedProjectsProjectIdRouteImport.update({
    id: '/projects/$projectId',
    path: '/projects/$projectId',
    getParentRoute: () => AuthenticatedRoute,
  } as any)

export interface FileRoutesByFullPath {
  '/login': typeof LoginRoute
  '/explorer': typeof AuthenticatedExplorerRoute
  '/': typeof AuthenticatedIndexRoute
  '/projects/$projectId': typeof AuthenticatedProjectsProjectIdRoute
}
export interface FileRoutesByTo {
  '/login': typeof LoginRoute
  '/explorer': typeof AuthenticatedExplorerRoute
  '/': typeof AuthenticatedIndexRoute
  '/projects/$projectId': typeof AuthenticatedProjectsProjectIdRoute
}
export interface FileRoutesById {
  __root__: typeof rootRouteImport
  '/_authenticated': typeof AuthenticatedRouteWithChildren
  '/login': typeof LoginRoute
  '/_authenticated/explorer': typeof AuthenticatedExplorerRoute
  '/_authenticated/': typeof AuthenticatedIndexRoute
  '/_authenticated/projects/$projectId': typeof AuthenticatedProjectsProjectIdRoute
}
export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths: '/login' | '/explorer' | '/' | '/projects/$projectId'
  fileRoutesByTo: FileRoutesByTo
  to: '/login' | '/explorer' | '/' | '/projects/$projectId'
  id:
    | '__root__'
    | '/_authenticated'
    | '/login'
    | '/_authenticated/explorer'
    | '/_authenticated/'
    | '/_authenticated/projects/$projectId'
  fileRoutesById: FileRoutesById
}
export interface RootRouteChildren {
  AuthenticatedRoute: typeof AuthenticatedRouteWithChildren
  LoginRoute: typeof LoginRoute
}

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/login': {
      id: '/login'
      path: '/login'
      fullPath: '/login'
      preLoaderRoute: typeof LoginRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/_authenticated': {
      id: '/_authenticated'
      path: ''
      fullPath: ''
      preLoaderRoute: typeof AuthenticatedRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/_authenticated/': {
      id: '/_authenticated/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof AuthenticatedIndexRouteImport
      parentRoute: typeof AuthenticatedRoute
    }
    '/_authenticated/explorer': {
      id: '/_authenticated/explorer'
      path: '/explorer'
      fullPath: '/explorer'
      preLoaderRoute: typeof AuthenticatedExplorerRouteImport
      parentRoute: typeof AuthenticatedRoute
    }
    '/_authenticated/projects/$projectId': {
      id: '/_authenticated/projects/$projectId'
      path: '/projects/$projectId'
      fullPath: '/projects/$projectId'
      preLoaderRoute: typeof AuthenticatedProjectsProjectIdRouteImport
      parentRoute: typeof AuthenticatedRoute
    }
  }
}

interface AuthenticatedRouteChildren {
  AuthenticatedExplorerRoute: typeof AuthenticatedExplorerRoute
  AuthenticatedIndexRoute: typeof AuthenticatedIndexRoute
  AuthenticatedProjectsProjectIdRoute: typeof AuthenticatedProjectsProjectIdRoute
}

const AuthenticatedRouteChildren: AuthenticatedRouteChildren = {
  AuthenticatedExplorerRoute: AuthenticatedExplorerRoute,
  AuthenticatedIndexRoute: AuthenticatedIndexRoute,
  AuthenticatedProjectsProjectIdRoute: AuthenticatedProjectsProjectIdRoute,
}

const AuthenticatedRouteWithChildren = AuthenticatedRoute._addFileChildren(
  AuthenticatedRouteChildren,
)

const rootRouteChildren: RootRouteChildren = {
  AuthenticatedRoute: AuthenticatedRouteWithChildren,
  LoginRoute: LoginRoute,
}
export const routeTree = rootRouteImport
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()
